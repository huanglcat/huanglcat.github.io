<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[npx详细使用]]></title>
    <url>%2F2019%2F05%2F18%2Fnpx%2F</url>
    <content type="text"><![CDATA[前几天接触到了npx，发现这个命令非常好用，这里总结下npx的使用。 npx是什么？ npx是npm5.2之后发布的一个命令。官网说它是“execute npm package binaries”，就是执行npm依赖包的二进制文件，简而言之，就是我们可以使用npx来执行各种命令。npx官网：https://www.npmjs.com/package/npx 为什么要使用npx？ 解决的问题在命令行执行本地已安装的依赖包命令 使用npx可以在命令行直接执行本地已安装的依赖包命令，不用在scripts脚本写入命令，也不用麻烦的去找本地脚本。 首先来看这个场景：我们本地安装了一个依赖包：1npm i -D mocha 想要在本地（当前目录）执行它时，什么都不做时是不能运行这个命令的： 我们一般会使用几种方式来运行我们想要运行的命令： 使用package.json的scripts脚本1234//package.json&quot;scripts&quot;: &#123; &quot;findmocha&quot;: &quot;mocha --version&quot;,&#125; 然后在命令行运行：1npm run findmocha 在命令行中直接找到模块的二进制文件运行 全局安装模块 而使用npx，我们可以直接在命令行执行我们要运行的命令：12npm i -D mochanpx mocha --version 不用全局安装，直接在命令行执行一次性命令 有很多命令，我们只需要执行一次的，但是却要全局安装一次，实在不科学，使用npx，可以在不全局安装依赖包的情况下，运行命令，而且运行后不会污染全局环境 比如1npx create-react-app my-react-app npx 将create-react-app下载到一个临时目录，使用以后再删除。每次运行这个命令，都会重新下载依赖包，运行后删除。 切换node版本来运行命令 当你想要运行的命令不兼容当前的nodejs版本，可以通过npx来切换版本，指定某个版本的 Node 来运行命令。 npx的-p选项指定要安装的包，并将其添加到正在运行的$PATH中如：123npx node@6 -vnpx node@7 -vnpx node@8 -v 以上的命令，会自动下载需要的node，执行完命令后删除。 npx的原理npx的原理，就是在运行它时，执行下列流程： 去node_modules/.bin路径检查npx后的命令是否存在，找到之后执行； 找不到，就去环境变量$PATH里面，检查npx后的命令是否存在，找到之后执行; 还是找不到，自动下载一个临时的依赖包最新版本在一个临时目录，然后再运行命令，运行完之后删除，不污染全局环境。 安装和参数说明 安装1npm install -g npx 常用参数-p 参数-p参数用于指定 npx 所要安装的模块1npx -p node@6 node -v –no-install 参数强制使用本地模块，不下载远程模块，如果本地不存在该模块，就会报错。 –ignore-existing 参数忽略本地的同名模块，强制安装使用远程模块 使用场景总结使用npx执行 本地命令12npm i -D mochanpx mocha --version 使用npx一次性执行命令1npx create-react-app my-react-app 使用npx切换node版本1npx node@6 -v 使用npx执行 GitHub 源码1npx github:piuccio/cowsay 远程代码必须是一个模块，即必须包含package.json和入口脚本 使用npx开启一个静态服务器12npx http-server #默认返回根目录下index.htmlnpx http-server -p 3000 #指定端口 参考链接：https://www.npmjs.com/package/npxhttp://www.ruanyifeng.com/blog/2019/02/npx.htmlhttps://www.jianshu.com/p/a4d2d14f4c0e]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>npx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[npm基础知识和命令总结]]></title>
    <url>%2F2019%2F05%2F15%2Fnpm%2F</url>
    <content type="text"><![CDATA[npm是工作过程中很常用的包管理工具，这里记录汇总npm基础知识和命令。 npm是什么？ npm全称Node Package Manager，是node.js的模块依赖管理工具，它有一个日益强大的对手叫yarn，yarn是Facebook发布的一款依赖管理工具。 npm的使用场景：上传分享自己写的程序代码（包），下载别人写的程序代码（包）。 npm的组成： npm官网（https://www.npmjs.com/），用来管理设置上面的代码程序包 一个大数据库，大家分享的程序就放在那里 命令行工具（CLI），我们通过CLI来与npm交流npm怎么安装与升级 与NodeJs一起集成安装，安装NodeJS时安装npm。 查看npm版本12npm -v#6.5.0 查看帮助1npm help &lt;command&gt; 升级npm12npm install npm -gnpm install npm@latest -g #升级到最新版本 包是什么？ npm的核心是包，npm将它管理的程序都叫包，每个包里有个package.json文件，位于包的根目录下，用于定义包的属性（配置信息），比如包的名称、版本、许可证等等。在进行npm install命令时，就是根据这个配置文件，来自动下载这个包所需的模块，配置项目所需的运行和开发环境。 package.jsonpackage.json是一个JSON对象，每一个键值对就是当面包的一个配置。一个package.json常用字段:123456789101112131415161718192021222324252627282930313233343536373839404142&#123; &quot;name&quot;: &quot;Hello World&quot;, //包名 &quot;version&quot;: &quot;0.0.1&quot;,//包的版本号，主版本.次版本.补丁版本 &quot;author&quot;: &quot;张三&quot;,//包的作者，格式设置：Your Name &lt;email@example.com&gt; (http://example.com) &quot;description&quot;: &quot;第一个node.js程序&quot;,//包的描述 &quot;keywords&quot;:[&quot;node.js&quot;,&quot;javascript&quot;],//包的关键词 &quot;main&quot;:&quot;index.js&quot;,//main 字段指定了程序的主入口文件，require(&apos;moduleName&apos;) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。 &quot;repository&quot;: &#123;// 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。 &quot;type&quot;: &quot;git&quot;, &quot;url&quot;: &quot;https://path/to/url&quot; &#125;, &quot;license&quot;:&quot;MIT&quot;,//包的版权协议 &quot;engines&quot;: &#123;&quot;node&quot;: &quot;0.10.x&quot;&#125;,//该模块运行的平台，比如 Node 的某个版本或者浏览器 &quot;bugs&quot;:&#123;&quot;url&quot;:&quot;http://path/to/bug&quot;,&quot;email&quot;:&quot;bug@example.com&quot;&#125;, &quot;contributors&quot;:[&#123;&quot;name&quot;:&quot;李四&quot;,&quot;email&quot;:&quot;lisi@example.com&quot;&#125;],//包的其他贡献者姓名 &quot;scripts&quot;: &#123;//运行脚本命令的npm命令行缩写，执行命令：npm run &lt;命令名&gt; &quot;start&quot;: &quot;node index.js&quot; &#125;, &quot;config&quot;:&#123;//添加命令行的环境变量 &quot;port&quot;:&quot;8080&quot;//可以在js中通过process.env.npm_package_config_port获取，可以通过npm config set &lt;包名&gt;:port 80修改 &#125;, &quot;browser&quot;: &#123;//供浏览器使用的版本 &quot;tipso&quot;: &quot;./node_modules/tipso/src/tipso.js&quot; &#125;, &quot;dependencies&quot;: &#123;//项目运行依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 * node_module 目录下 &quot;express&quot;: &quot;latest&quot;, &quot;mongoose&quot;: &quot;~3.8.3&quot;, &quot;handlebars-runtime&quot;: &quot;~1.0.12&quot;, &quot;express3-handlebars&quot;: &quot;~0.5.0&quot;, &quot;MD5&quot;: &quot;~1.2.0&quot; &#125;, &quot;devDependencies&quot;: &#123;//项目开发依赖包列表 &quot;bower&quot;: &quot;~1.2.8&quot;, &quot;grunt&quot;: &quot;~0.4.1&quot;, &quot;grunt-contrib-concat&quot;: &quot;~0.3.0&quot;, &quot;grunt-contrib-jshint&quot;: &quot;~0.7.2&quot;, &quot;grunt-contrib-uglify&quot;: &quot;~0.2.7&quot;, &quot;grunt-contrib-clean&quot;: &quot;~0.5.0&quot;, &quot;browserify&quot;: &quot;2.36.1&quot;, &quot;grunt-browserify&quot;: &quot;~1.3.0&quot;, &#125;&#125; 依赖包版本格式: 指定：1.2.2 ~+指定：~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2，小于1.3.x） ^ + 指定版本：^1.2.2，表示安装1.x.x的最新版本，（不低于1.2.2，小于2.x.x） latest：最新版本## package.json生成方式： 手写 执行npm init生成依赖包写入package.json不在package.json的包要写入，使用–save 或者–save-dev12npm install express --save # 将该模块写入dependencies属性npm install express --save-dev #将该模块写入devDependencies属性 下载安装、卸载、更新包 安装方式（全局安装与本地安装）123npm install express # 本地安装npm i express #简写npm install express -g # 全局安装 全局安装：安装包放在 /usr/local 下或者你 node 的安装目录，可以在命令行直接使用 本地安装：安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），没有时会自动创建，通过 require() 来引入本地安装的包引用下载的包12//var &lt;Module Name&gt;= require(&apos;&lt;Module Name&gt;&apos;);var express = require(&apos;express&apos;); 卸载包1234npm uninstall express #删除node_modules目录下面的包npm uninstall --save express #删除node_modules的包和package.json中的运行时依赖npm uninstall --save-dev express #删除node_modules的包和package.json中的开发依赖npm uninstall -g express #全局卸载 更新包12npm update expressnpm update express -g # 更细全局包 查询包的信息 查看安装包信息1234npm list #查看本地安装包信息npm list -g #查看全局安装包信息npm list express #查看某个安装包信息npm ls #npm list简写 提升下载包的速度由于npm的包大多是在国外数据库，下载速度会受到影响，我们想快一点，可以使用国内的淘宝镜像。淘宝NPM镜像是一个完成的npmjs.org镜像，基本与官网服务一致。 镜像地址淘宝镜像： 搜索地址：http://npm.taobao.org/ registry地址：http://registry.npm.taobao.org/官网镜像： 搜索地址：https://www.npmjs.com/ registry地址：https://registry.npmjs.org/使用淘宝镜像临时使用淘宝镜像12#安装包时临时制定镜像地址npm --registry https://registry.npm.taobao.org install express 持久使用淘宝镜像先配置npm镜像，然后再安装包配置镜像：12npm config set registry https://registry.npm.taobao.org #设置成淘宝镜像npm config set registry https://registry.npmjs.org/ #设置成官网的 监测是否设置成功12npm config get registry #查询镜像地址npm info express #查询镜像地址 使用cnpm来使用淘宝镜像安装cnpm1npm install -g cnpm --registry=https://registry.npm.taobao.org 使用cnpm安装包1cnpm install [name] 使用nrm来管理切换npm源nrm专门用来管理和快速切换私人配置的registry。 安装1npm install -g nrm 列出可选源1nrm ls 切换源1nrm use taobao 增加源1nrm add &lt;源名称&gt; &lt;源地址&gt; #比如企业或组织有自己的私有源（镜像）时 删除源1nrm del 测试源响应12nrm test #测试所有源nrm test npm #测试npm官方源 如何创建和发布自己的包 创建模块1npm init 此时，生成了package.json配置文件 增加入口文件默认的入口文件是根目录下的index.js，在根目录下创建index.js1234//index.jsexports.printMsg = function() &#123; console.log(&quot;This is a message from the demo package&quot;);&#125; 登录或注册npm账号12npm adduser #注册npm账号npm login #登录npm账号 发布包发布包之前，我们需要做两步： 修改CHANGE.MD，这里记录了我们包发布的版本变化情况，格式自定 修改package.json中的version字段，表示这次发布的包的版本，如果不修改，发布会报错。发布包：1npm publish 撤销发布撤销发布自己发布过的某个版本代码1npm unpublish &lt;package&gt;@&lt;version&gt; 发布成功之后，这个包就可以通过npm install命令来进行安装了。 管理包的版本当我们下载和发布我们的包时，都会关注到包的版本号，npm使用语义版本号来管理包。语义版本号组成：X.Y.Z X代表主版本号，表示有大变动，向下不兼容 Y代表次版本号，表示新增功能，向下兼容 Z代表补丁版本号，表示修复BUG 参考资料：官网：https://www.npmjs.com.cn/getting-started/installing-npm-packages-locally/菜鸟教程：https://www.runoob.com/nodejs/nodejs-npm.htmlnpm脚本使用：http://www.ruanyifeng.com/blog/2016/10/npm_scripts.htmlpackage.json说明：http://javascript.ruanyifeng.com/nodejs/packagejson.html]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-cli3项目本地mock数据时报404错误]]></title>
    <url>%2F2019%2F05%2F12%2Fvue-cli3-mock-data%2F</url>
    <content type="text"><![CDATA[vue-cli3下创建的项目,在vue.config.js中的devServer开发服务器中的前置中间件mock数据，运行报错的处理。 环境： window7、node.js(11.6.0) 项目： vue-cli3下创建的项目，已安装axios，使用自带的webpack-dev-server来mock数据： 在根目录下创建vue.config.js扩展webpack设置： 在vue组件中获取数据： 查看页面发现报404错误，注意两点： mock配置文件中修改之后需要重启服务，否则不会更新； 如果启动服务过程中检测到代码有错误，但是服务仍然启动成功的，需要解决错误直至错误完全解决，否则会影响配置更新。 在命令行中使用ctrl+C终止服务，重新启动npm start 即可。]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>vue-cli3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记git误删的本地文件找回]]></title>
    <url>%2F2019%2F05%2F12%2Fgit-recover-delete-file%2F</url>
    <content type="text"><![CDATA[如何恢复git误删的本地文件？可以使用git reset命令 推送本地代码到github，执行了以下两步：12git add .git commit -m &quot;update blog&quot; 然后一不小心执行了下面的代码1git checkout hexo hexo是要推送的分支，然后，辛辛苦苦写了半天的本地代码就被覆盖了！！！不急不急，找下git历史：执行命令：1git reflog 找到要恢复id，这里我要恢复到我commit的那一刻，执行命令：1git reset --hard 7fe0ee0 这样，代码就找回来了。]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-cli 3.0从零快速创建vue项目原型框架]]></title>
    <url>%2F2019%2F05%2F12%2Fvue-cli3-create-project%2F</url>
    <content type="text"><![CDATA[Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统。下面记录了如何使用Vue CLI 3从零快速创建vue项目原型框架。 环境配置：本机操作系统：window7 安装node.js和npm：node.js(vue-cli 3.0安装需要nodejs版本大于8.9.0，本机安装的是11.6.0) 查看本机node.js版本：1node -v 如果node.js版本低，可以使用一个windows下nodejs的版本管理工具gnvm来更新nodejs版本，可以更新到最新版本，也可以更新到特定版本（文档地址：http://ksria.com/gnvm/），在本机存在nodejs环境时，下载解压缩获取到gnvm.eve后将其保存到nodejs的安装目录下，执行命令更新到最新版本：1gnvm update latest 本机npm版本6.5.0，查看npm版本命令：1npm -v 安装@vue/cli + @vue/cli-service-global：vue-cli3是vue更新的构建工具，降低了使用webpack的难度，支持热更新，有webpack-dev-server支持，搭建了一个测试服务器。（文档地址：https://cli.vuejs.org/zh/guide/）通过 @vue/cli + @vue/cli-service-global 可以快速开始零配置原型开发。 安装命令：123npm install -g @vue-clinpm install -g @vue/cli-service-global 如果已将安装了vue-cli旧版本，需要先卸载就版本，再安装新版本。（官网有说明）安装开发工具Visual Studio Code：Visual Studio Code (简称 VS Code / VSC) 是一款免费开源的现代化轻量级代码编辑器，支持几乎所有主流的开发语言的语法高亮、智能代码补全、自定义快捷键、括号匹配和颜色区分、代码片段、代码对比 Diff、GIT命令 等特性，支持插件扩展，并针对网页开发和云端应用开发做了优化。软件跨平台支持 Win、Mac 以及 Linux。内置Git终端。 下载地址：https://code.visualstudio.com/ 安装成功之后，最好安装一些方便vue开发的插件，在扩展中输入vue，可查询vue相关插件，Vue VSCode Snippets可以提供快速构建代码块命令，安装即可使用快捷命令。 此时，环境已准备好。 创建新项目可以根据使用习惯选择命令行或者UI界面创建新项目： 命令行快速创建新项目：在vscode的下面打开终端，输入创建项目命令：1vue create vue-new 可以使用默认配置（只配置babel 和 eslint）也可以使用自定义配置，通过键盘上下键可切换选择，此时选择自定义配置Manually select features 后按空格键选中/反选自定义配置，按a键 全选/全不选： 仍然是通过键盘上下键选择你要的配置，再通过空格键选择配置，配置说明如下： Bacel：配置Bacel（配置Bacel可以自由的在开发环境使用es6语法，Bacel会将你的es6语句编译为es5语句） TypeScript：配置TypeScript开发环境 Progressive Web App (PWA) Support：配置对PWA的支持（PWA全称Progressive Web App，直译是渐进式WEB应用，是 Google 在 2015 年提出，2016年6月才推广的项目） Router：配置vue router Vuex：配置Vuex CSS Pre-processors：配置css预处理类型 Linter / Formatter：配置Linter / Formatter规范类型 Unit Testing：配置单元测试方式 E2E Testing：配置E2E测试方式 这里选择的自定义配置如下： 选择好回车之后，根据提示输入Y或N ，或者直接回车选择默认配置： 选好配置回车之后，会提示是否保存为之后创建新工程的默认配置： 这里直接回车确认，等待命令完成 此时已经创建好一个新项目。 使用图形化界面创建新项目如果不喜欢在命令行进行操作，也可以在图形化界面创建新项目，在vscode中打开终端，输入命令：1vue ui 可以看到该命令创建了一个本地服务，打开了一个浏览器，窗口如下： 点击创建新项目： 输入项目名，选择包管理器（npm）之后 点击下一步，可以看到，同命令行一样的，进行项目配置： 选择手动配置，点击下一步： 选择自定义配置后点击下一步： 选择具体配置后，点击创建新项目： 保存配置之后，点击创建，看到loading界面，安装成功后，可以看到一个管理页面： 可以在上面管理插件： 配置依赖： 修改配置： 运行和管理任务： 点击运行serve命令，可以看到项目的各项配置，资源和依赖项 点击启动app，可以看到运行起来的页面： 还可以分析项目的打包情况： 此时，创建项目成功。 添加UI库插件如果没有特殊的业务需求或者设计展现，可以根据业务特点，选一款UI库，例如如果是移动端，可以选择滴滴团队的UI框架cube-ui， 输入命令：1vue add cube-ui 项目运行此时可以开始进行开发了。打开项目目录，可以看到项目目录如下： 输入命令运行项目：1npm run serve 可以将此命令改成start， 执行start命令不用输入run：1npm start 此时，已经创建好一个vue项目原型框架，可以尽情地开始开发啦！]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next主题个性化配置]]></title>
    <url>%2F2019%2F05%2F11%2Fhexo-next%2F</url>
    <content type="text"><![CDATA[Next是hexo中众多主题之一，在进行hexo博客中各种配置时遇到了不少坑，这里一一记录一下。 修改布局风格 Next默认风格是Muse，可修改为其他，在themes/next/_config.yml中修改配置123456789# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes#scheme: Musescheme: Mist#scheme: Pisces#scheme: Gemini 修改菜单目录 Next主题默认只有主页和和关于，如果要增加菜单，在themes/next/_config.yml中修改配置，1234567891011121314151617# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------menu: home: / || home about: /about/ || user tags: /tags/ || tags #标签 categories: /categories/ || th #分类 archives: /archives/ || archive #归档 guestbook: /guestbook/ || comment #留言 #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat# Enable/Disable menu icons.menu_icons: enable: true 注意，留言页默认是没有的，需要自己增加：1hexo new &quot;guestbook&quot; 效果如下： 添加头像图片 在themes/next/_config.yml中修改配置，1234# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gifavatar: /uploads/avatar.jpg 图片需要存在目录路径效果如下： 添加社交账号 在themes/next/_config.yml中修改配置，12345678910111213141516171819202122232425# ---------------------------------------------------------------# Sidebar Settings# ---------------------------------------------------------------# Social Links.# Usage: `Key: permalink || icon`# Key is the link label showing to end users.# Value before `||` delimeter is the target permalink.social: GitHub: https://github.com/yourname || github E-Mail: mailto:yourname@gmail.com || envelope #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skypesocial_icons: enable: true icons_only: false transition: false 效果如下： 添加友情链接 在themes/next/_config.yml中修改配置，12345678# Blog rollslinks_icon: linklinks_title: Linkslinks_layout: block#links_layout: inlinelinks: 简书偶余杭: https://www.jianshu.com/u/8af7f2837baf 效果如下： 添加背景动画 在themes/next/_config.yml中修改配置，这里选了canvas_next，有四种效果，根据自己的喜好选择。（如设置了没有成功，请【1.更新Next主题版本;2.运行命令：hexo clean；hexo g；hexo d】）1234567891011# Canvas-nestcanvas_nest: true# three_wavesthree_waves: false# canvas_linescanvas_lines: false# canvas_spherecanvas_sphere: false 效果如下： 文章字数统计 安装插件： 1npm i --save hexo-wordcount 在themes/next/_config.yml中修改配置， 12345678# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true wordcount: true min2read: true totalcount: true separated_meta: true 打开 post.swig 文件，/themes/next/layout/_macro/post.swig，在对应数字后增加单位：字数：123&lt;span title=&quot;&#123;&#123; __(&apos;post.wordcount&apos;) &#125;&#125;&quot;&gt; &#123;&#123; wordcount(post.content) &#125;&#125; 字&lt;/span&gt; 阅读时长：123&lt;span title=&quot;&#123;&#123; __(&apos;post.min2read&apos;) &#125;&#125;&quot;&gt; &#123;&#123; min2read(post.content) &#125;&#125; 分钟&lt;/span&gt; 效果如下： 增加站内搜索 安装插件：1npm install hexo-generator-search --save 在themes/next/_config.yml中修改配置：12345678910# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 效果如下： 添加版权声明 在themes/next/_config.yml中修改配置： 12345# Declare license on postspost_copyright: enable: true license: CC BY-NC-SA 3.0 license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/ 效果： 配置页面访问量 使用LeanCloud作为服务后台，先注册一个LeanCloud账号：Leancloud官网创建一个应用，名字随便在应用中的存储中创建一个Class，名字叫做Counter, 权限设置为无限制: 在themes/next/_config.yml中修改配置：123456789# Show number of visitors to each article.# You can visit https://leancloud.cn get AppID and AppKey.leancloud_visitors: enable: true app_id: app_key: security: false betterPerformance: false 其中 app_id 和 app_key 在 LeanCloud 的设置 -&gt; 应用 Key 可以找到效果如下:记录文章访问量的唯一标识符是文章的发布日期以及文章的标题，因此请确保这两个数值组合的唯一性，如果你更改了这两个数值，会造成文章阅读数值的清零重计 增加评论功能 使用valine+LeanCloud增加评论功能。在themes/next/_config.yml中修改配置：1234567891011121314# Valine.# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline: enable: true appid: appkey: notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: 说点什么吧！ # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size 注意appid和appkey的名字需要和项目中的valine.swig文件中的配置一致。否则不会加载评论框的哦。这里需要注意，为了安全和valine运行正常，需要在LeanCloud中增加安全域名：效果如下：但是我们又不想所有的页面都有评论，这时候，可以在页面的Front-matter中增加comments: false,就可以不显示评论：123456---title: 关于date: 2018-03-24 22:24:28type: &quot;about&quot;comments: false---]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo小白学习详细教程]]></title>
    <url>%2F2019%2F05%2F11%2Fhexo-cource%2F</url>
    <content type="text"><![CDATA[hexo是一个快速、简介、高效的博客框架，支持Markdown,拥有丰富的插件系统，常与GitHub等代码托管平台一起构建个人博客网站。 hexo是一个快速、简介、高效的博客框架，支持Markdown,拥有丰富的插件系统，常与GitHub等代码托管平台一起构建个人博客网站。 官方链接 中文官网 安装及使用 前提：电脑中需要已安装Git、Node.js(6.9以上) 安装：1$ npm install hexo-cli -g//安装 建站123$ hexo init &lt;目录名&gt;//初始化博客项目（最新版本已经可以在这一步安装依赖）$ cd &lt;目录名&gt;//进入博客$ npm install//安装依赖 命令完成后的目录如下：文件夹说明：123456789101112131415|-- demo//项目跟目录名 |-- .gitignore//git时忽略的文件或目录 |-- package-lock.json |-- package.json//应用程序的信息 |-- _config.yml//网站的配置信息 |-- scaffolds//模板文件夹，Hexo的模板是指在新建的markdown文件中默认填充的内容。 | |-- draft.md | |-- page.md | |-- post.md//博文模板 |-- source//资源文件夹，存放用户资源 | |-- _posts//博文目录 | |-- hello-world.md//博文 |-- themes//主题文件夹，Hexo 会根据主题来生成静态页面 |-- landscape.//默认主题 ... 此时package.json中内容如下：12345678910111213141516171819&#123; &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: &#123; &quot;version&quot;: &quot;&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;hexo&quot;: &quot;^3.8.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;, &quot;hexo-server&quot;: &quot;^0.3.3&quot; &#125;&#125; 修改配置：配置修改教程：配置修改配置文件中必须修改的几项，其余可根据配置自行修改： url：网站地址，必须修改，此处博文是托管在github上，故此使用http://youname.github.io格式作为网站名字 language：语言，设置中文，根据需要修改，中文为zh-CN注意：配置值与配置名需要隔一个空格，否则会编译报错123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Hexo小白的博客subtitle:description:keywords:author: Hexo小白language: zh-CNtimezone:# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://emmaHuang.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: # Home page setting# path: Root path for your blogs index page. (default = &apos;&apos;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: &apos;&apos; per_page: 10 order_by: -date # Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: 运行1$ hexo server//运行本地服务 在浏览器打开“http://localhost:4000/”可以看到小站已经建起来了。 使用用hexo进行写博文的命令使用如下： 新建博文1hexo new &quot;my first blog&quot;//有逗号必须使用引号括起来 在source/_posts/下生成文件my-first-blog.md如下：12345---title: my first blogdate: 2019-05-11 16:20:56tags:--- 这里使用---分割的区域叫做“Front-matter”，用于指定这篇博文的变量此时如果运行了hexo server,刷新浏览器时可看到新建的博文：可手动修改Front-matter：123456789101112---layout:title: my first blogdate: 2019-05-11 16:20:56updated:comments:tags:- introduction- hexocategories:- Diary--- tags表示标签， categories表示分类，修改之后刷新如下: 生成静态文件 123hexo generate//简写hexo g hexo g -d//文件生成后立即部署网站hexo g -w//监视文件变动 发表草稿 1hexo publish &quot;my first blog&quot; 启动本地服务器 1hexo server [-p 4001] //可以修改端口 部署网站 123hexo deployhexo d//简写hexo d -g//部署之前先生成静态文件 清除缓存(db.json)和已经生成的静态文件(public)，当发现对站点的更改无效时，比如更换主题后，执行此命令 1hexo clean 列出网站资料 1hexo list 部署hexo提供一键部署的功能，命令：1hexo deploy//简写hexo d 在开始之前，需要安装deployer和在_config.yml中进行配置：安装deployer(这里只记录Git方式)1npm install hexo-deployer-git --save 修改配置1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:emmaHuang1992/emmaHuang1992.github.io.git branch: public message: publish blog 生成站点文件并推送远程库：12hexo clean//清除站点文件hexo deploy//重新生成站点文件并推送 推送之前，在库设置（Repository Settings）中将默认分支设置为_config.yml配置中的分支名称。稍等片刻，站点就会显示Github Pages中 可设置两个分支（根据自己的习惯自行配置）： master：存放源代码 public：存放编译部署后的站点文件 开始在github中新建代码仓库： 新建的repository名字要与账号对应，格式：youname.github.io 生成本机ssh1ssh-keygen -t rsa -C &quot;email@xx.com&quot; 在目标目录中找到id_rsa.pub打开复制内容到github对应库中的settings-&gt;Deploy keys-&gt;Add new-&gt;复制粘贴公钥-&gt;选中确认写入权限-&gt;添加然后执行以下命令： 1234$ eval "$(ssh-agent -s)"$ ssh-add ~/.ssh/id_rsa$ clip &lt; ~/.ssh/id_rsa.pub$ ssh -T git@github.com//测试下公钥有没有添加成功 主题配置 如果不想使用默认的主题，也可以自己下载一个新的主题，放在themes目录下，并修改 _config.yml 内的 theme 设定，即可切换主题。拿使用广泛的next主题为例：next使用教程 在themes目录下克隆next主题 1git clone https://github.com/iissnan/hexo-theme-next themes/next 切换主题 12## Themes: https://hexo.io/themes/theme: next 这时候，重新hexo clean,hexo g，hexo s，就可以看到主题更新啦！]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[换终端使用git分支更新hexo博客]]></title>
    <url>%2F2019%2F05%2F11%2FchangeBlog%2F</url>
    <content type="text"><![CDATA[这些天想更新之前使用hexo搭建的博客，发现换终端之后需要重新安装环境，这里记录了如何使用git分支在换终端之后更新hexo博客。 #这是换机之前的操作：先把源文件上传git分支由于由hexo d编译部署上传到github上的不是源文件，是编译之后生成的网页：即我们编译生成的.deploy_git里面的内容：而我们需要的源文件目录是包括source、themes、package等文件的目录： 所以我们需要把源文件目录也上传到github上，从而进行管理，首先，在你的博客Repository中新建一个“hexo”分支，名字自定：然后在setting中设置默认分支为hexo，便于推送： 这时候，新建目录，在目录下运行命令：1git clone https://github.com/huanglcat/huanglcat.github.io.git 把源文件分支克隆到本地，注意，克隆时只会克隆默认分支的内容，如果默认分支不是hexo，就没有克隆到源文件。 克隆下来的文件目录如下： 把除了.git 文件夹外的所有文件都删掉（这些是编译后的网页文件），把之前我们写的博客源文件全部复制过来，除了.deploy_git（编译后的文件目录）。其中，.gitignore（设置不需要git的文件或目录）文件中中需要设置部分不需要上传的目录： 1234567.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/ git不能嵌套上传，由于我之前克隆过主题，在主题中有一个.git目录：把它删掉，否则在其他终端下载时会报错。 这时候，在根目录下运行命令：123git add .git commit –m &quot;add branch&quot;git push 查看是否正确更新： #换终端的操作git、npm、node.js等环境先安装好，设置全局用户：12git config --global user.name &quot;yourgithubname&quot;git config --global user.email &quot;yourgithubemail&quot; 生成本机 ssh key1ssh-keygen -t rsa -C &quot;youremail&quot; 生成后增加在github库中。安装hexo：1npm install hexo-cli -g 同样克隆下分支之后，安装依赖库12npm installnpm install hexo-deployer-git --save 生成和部署博客：12hexo ghexo d 就可以更新博客了。]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记Github+hexo搭建个人博客]]></title>
    <url>%2F2018%2F03%2F25%2Fblog%2F</url>
    <content type="text"><![CDATA[2018年初，想要重新建博客，于是用Github+hexo搭建了本博客。使用hexo本地搭建页面，再push到Github仓库。本文记录了使用Github+hexo搭建个人博客的过程及遇到的问题。 环境 window系统 已安装git 已安装Node.js 准备hexo安装hexo1$ npm i hexo-cli -g 检查hexo是否安装成功 1$ hexo 提示找不到命令，于是增加环境变量，为hexo安装路径的bin目录：之后成功响应。 初始化hexo新建一个空文件夹，我命名为hexo，进入hexo目录，打开git Bash，初始化hexo1$ hexo init 生成项目目录如下： 安装hexo插件1$ npm i hexo-deployer-git --save 安装过程中出现问题：出现这个问题可能是由于npm cache,于是对npm cache进行清理：1$ npm cache clean --force 之后正常安装。 使用hexo此时可以创建页面了1$ hexo g # hexo generate 成功生成页面后，进行本地预览1$ hexo s # hexo server 看到以下画面，说明本地页面搭建成功 需要新建一个文章时输入命令：1$ hexo new “name” 需要在项目的source目录下新建一个页面时输入命令：1$ hexo new page “name” 当重新编辑页面时，在本地调试12$ hexo g #当修改配置时，需要执行这一步$ hexo s --debug 推送上Github命令1$ hexo d # hexo deploy 清除缓存1$ hexo clean 增加图片 需要在文章中增加图片时，可以直接插入html代码，也可以使用MarkDown语法： 图片存在根目录source下的imgs目录，也可使用外链 12&lt;img src=&quot;/imgs/index.png&quot; width = &quot;800&quot; height = &quot;200&quot; alt=&quot;图片名称&quot; align=center /&gt; ![“图片描述”](/imgs/你的图片名字.JPG) hexo详细命令查看: hexo api 准备Github准备repository新建的repository名字要与账号对应，格式：huanglcat.github.io 设置SSH这时需要将Github连接本地，设置SSH。设置SSH有多种方法，我使用了git命令来生成秘钥，首先在本地创建SSH KEYS（邮箱为github注册邮箱，之后要去确认路径和输入密码，一路回车就可以）： 1$ ssh-keygen -t rsa -C "email@xx.com" 成功的话会在 ~/下生成 .ssh文件夹，进去(设置的SSH可以在c盘中的用户目录中找到)，打开 id_rsa.pub，复制里面的key粘贴到setting中的key输入框中。输入 eval &quot;$(ssh-agent -s)&quot; ，添加密钥到ssh-agent，再输入 ssh-add ~/.ssh/id_rsa ，添加生成的SSH key到ssh-agent 1234$ eval "$(ssh-agent -s)"$ ssh-add ~/.ssh/id_rsa$ clip &lt; ~/.ssh/id_rsa.pub$ ssh -T git@github.com//测试下公钥有没有添加成功 出现“you`re successfully authenticated”即设置成功 修改配置修改hexo配置修改项目根目录下的“_config.yml”文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Emma的博客 # titlesubtitle:description: 桌上有刀，桌下有猫 #网站描述keywords:author: Emma language: zh-Hanstimezone:# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://huanglcat.github.io #注意修改此处链接root: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: # Home page setting# path: Root path for your blogs index page. (default = &apos;&apos;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: &apos;&apos; per_page: 10 order_by: -date # Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: # 注意修改deploy type: git repo: git@github.com:huanglcat/huanglcat.github.io.git branch: master 注意：配置文档的冒号“：”后必须要有一个空格，否则会报错 push到Github首先配置git12$ git config --global user.email "emai@xxx.com"$ git congif --global user.name "huanglcat" 然后执行以下命令12$ hexo g $ hexo d 在浏览器查看：huanglcat.github.com，可以看到一个hexo默认主题的页面（当看到404时，试试清除缓存） 修改主题更换主题首先将看好的主题克隆下来， 1$ git clone https://github.com/theme-next/hexo-theme-next themes/next 然后修改项目根目录下的”_config.yml” 1theme: next 这时主题已经更换为next了，而next主题中有几种外观可以更换，找到根目录下的themes下的next主题目录，在其中的“_config.yml”配置文件中修改： 123456# Schemesscheme: Mist#scheme: Muse#scheme: Mist#scheme: Pisces#scheme: Gemini 修改目录当前目录只有首页和归档，next中可以增加目录，在next主题的“_config.yml”中修改： 123456789menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 注意，除了home和archives,其他目录都需要自己创建页面： 1$ hexo new page “tags” 创建之后页面在项目根目录的source目录下生成，之后还需修改页面类型： 12345---title: 标签date: 2018-03-24 22:19:58type: &quot;tags&quot;--- 增加头像在主题中增加头像，可以使用本地增加图片也可以用外链。在本地增加先在next目录的source目录下新建文件夹“uploads”，增加图片；在next主题的“_config.yml”中修改： 1avatar: /uploads/avatar.jpg 首页折叠此时，博客首页的文章是全部显示的，需要将文章进行折叠，在文章需要折叠的内容之前增加代码 1&lt;!--more--&gt; 此时首页文章已经折叠了： 参考： hexo使用：https://hexo.io/ 设置SSH：http://www.xuanfengge.com/using-ssh-key-link-github-photo-tour.html MarkDown使用：https://www.appinn.com/markdown/ 更换主题：https://segmentfault.com/a/1190000012805627 修改主题：http://theme-next.iissnan.com/getting-started.html 增加图片：https://segmentfault.com/a/1190000009478837]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
</search>
